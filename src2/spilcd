#include "py/obj.h"
#include "py/runtime.h"
#include "driver/spi_master.h"
#include "driver/gpio.h"
#include "esp_lcd_panel_io.h"
#include "esp_lcd_panel_vendor.h"
#include "esp_lcd_panel_ops.h"

#define PIN_NUM_MOSI  9
#define PIN_NUM_MISO  8
#define PIN_NUM_CLK   7
#define PIN_NUM_CS_TFT 1
#define PIN_NUM_DC    2
#define PIN_NUM_RST  -1   // use -1 if tied to 3V3
#define PIN_NUM_BL    3

static esp_lcd_panel_handle_t panel_handle;

STATIC mp_obj_t tft_init(mp_obj_t width_in, mp_obj_t height_in) {
    int width = mp_obj_get_int(width_in);
    int height = mp_obj_get_int(height_in);

    spi_bus_config_t buscfg = {
        .sclk_io_num = PIN_NUM_CLK,
        .mosi_io_num = PIN_NUM_MOSI,
        .miso_io_num = PIN_NUM_MISO,
        .quadwp_io_num = -1,
        .quadhd_io_num = -1,
        .max_transfer_sz = width * height * 2 + 8, // full frame
    };
    spi_bus_initialize(SPI2_HOST, &buscfg, SPI_DMA_CH_AUTO);

    esp_lcd_panel_io_spi_config_t io_config = {
        .dc_gpio_num = PIN_NUM_DC,
        .cs_gpio_num = PIN_NUM_CS_TFT,
        .pclk_hz = 40 * 1000 * 1000,  // 40 MHz if stable
        .lcd_cmd_bits = 8,
        .lcd_param_bits = 8,
        .spi_mode = 0,
        .trans_queue_depth = 10,
    };
    esp_lcd_panel_io_handle_t io_handle;
    esp_lcd_new_panel_io_spi((esp_lcd_spi_bus_handle_t)SPI2_HOST, &io_config, &io_handle);

    esp_lcd_panel_dev_config_t panel_config = {
        .reset_gpio_num = PIN_NUM_RST,
        .color_space = ESP_LCD_COLOR_SPACE_RGB,
        .bits_per_pixel = 16,
    };
    esp_lcd_new_panel_st7789(io_handle, &panel_config, &panel_handle);
    esp_lcd_panel_reset(panel_handle);
    esp_lcd_panel_init(panel_handle);
    esp_lcd_panel_disp_on_off(panel_handle, true);

    return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_2(tft_init_obj, tft_init);

STATIC mp_obj_t tft_draw_bitmap(size_t n_args, const mp_obj_t *args) {
    int x = mp_obj_get_int(args[0]);
    int y = mp_obj_get_int(args[1]);
    int w = mp_obj_get_int(args[2]);
    int h = mp_obj_get_int(args[3]);
    mp_buffer_info_t bufinfo;
    mp_get_buffer_raise(args[4], &bufinfo, MP_BUFFER_READ);
    esp_lcd_panel_draw_bitmap(panel_handle, x, y, x + w, y + h, bufinfo.buf);
    return mp_const_none;
}
STATIC MP_DEFINE_CONST_FUN_OBJ_VAR_BETWEEN(tft_draw_bitmap_obj, 5, 5, tft_draw_bitmap);

STATIC const mp_rom_map_elem_t tft_module_globals_table[] = {
    { MP_ROM_QSTR(MP_QSTR_init), MP_ROM_PTR(&tft_init_obj) },
    { MP_ROM_QSTR(MP_QSTR_draw_bitmap), MP_ROM_PTR(&tft_draw_bitmap_obj) },
};
STATIC MP_DEFINE_CONST_DICT(tft_module_globals, tft_module_globals_table);

const mp_obj_module_t mp_module_tft = {
    .base = { &mp_type_module },
    .globals = (mp_obj_dict_t *)&tft_module_globals,
};

MP_REGISTER_MODULE(MP_QSTR_tft, mp_module_tft);
